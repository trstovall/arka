name: Build, Test, and Publish

on:
  push:
    tags:
      - 'v*.*.*'

jobs:

  build:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-13, macos-14]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up QEMU
        if: runner.os == 'Linux' && runner.arch == 'X64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
  
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade build cibuildwheel pkginfo

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.2
        env:
          # configure cibuildwheel on Linux to build native archs ('auto'),
          # and to split the remaining architectures between the x86_64 and
          # ARM runners
          # armv7l can be built without QEMU on GitHub Actions ARM runners but that's
          # not the case on all ARM64 hardware hence 'auto armv7l' for native archs
          # on the GHA ARM64 runner
          CIBW_ARCHS_LINUX: ${{ runner.arch == 'X64' && 'auto ppc64le s390x' || 'auto armv7l' }}
  
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  test-wheels:
    name: Test wheels on ${{ matrix.os }} / Python ${{ matrix.python-version }}
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-13, macos-14]
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    env:
      TOXENV: py${{ matrix.python-version }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}
          path: wheelhouse/

      - name: Install tox and wheel
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
        run: |
          python -m pip install tox

          PY_TAG="cp$(echo $PYTHON_VERSION | tr -d .)"

          case "${{ matrix.os }}" in
            ubuntu-latest)
              PLATFORM_TAG="linux*_x86_64"
              ;;
            ubuntu-24.04-arm)
              PLATFORM_TAG="linux*_aarch64"
              ;;
            windows-latest)
              PLATFORM_TAG="win_amd64"
              ;;
            macos-13)
              PLATFORM_TAG="macosx*_x86_64"
              ;;
            macos-14)
              PLATFORM_TAG="macosx*_arm64"
              ;;
            *)
              echo "Unsupported OS: ${{ matrix.os }}"
              exit 1
              ;;
          esac

          WHEEL=$(ls wheelhouse/*${PY_TAG}*${PLATFORM_TAG}*.whl | head -n 1)

          echo "$WHEEL"

          if [ -z "$WHEEL" ]; then
            echo "No matching wheel found for $PY_TAG + $PLATFORM_TAG"
            ls wheelhouse/
            exit 1
          fi

          python -m pip install "$WHEEL"
          tox

        shell: bash

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test-wheels]

    steps:
      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-wheels-*
          path: cibw/

      - name: List contents and flatten to dist
        run: |
          ls -R cibw/
          mkdir dist
          mv cibw/cibw-wheels-*/* dist/.
          ls -R dist

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade build cibuildwheel pkginfo
  
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

