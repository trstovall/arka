name: Build, Test, and Publish

on:
  push:
    tags:
      - 'v*.*.*'

jobs:

  build:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-13, macos-14]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Set up QEMU
        if: runner.os == 'Linux' && runner.arch == 'X64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
  
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build cibuildwheel

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.2
        env:
          # configure cibuildwheel on Linux to build native archs ('auto'),
          # and to split the remaining architectures between the x86_64 and
          # ARM runners
          # armv7l can be built without QEMU on GitHub Actions ARM runners but that's
          # not the case on all ARM64 hardware hence 'auto armv7l' for native archs
          # on the GHA ARM64 runner
          CIBW_ARCHS_LINUX: ${{ runner.arch == 'X64' && 'auto ppc64le s390x' || 'auto armv7l' }}
  
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build-sdist:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build cibuildwheel

      - name: Build sdist
        run: python -m build --sdist --outdir dist

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: built-packages
          path: |
            dist/*.tar.gz

  test-wheels:
    name: Test wheels on ${{ matrix.os }} / Python ${{ matrix.python-version }}
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-13, macos-14]
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    env:
      TOXENV: py${{ matrix.python-version }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}
          path: wheelhouse/

      - name: Install tox and wheel
        run: |
          python -m pip install tox
          WHEEL_FILE=$(ls wheelhouse/*.whl | head -n 1)
          python -m pip install "$WHEEL_FILE"

      - name: Run tox
        run: tox

  test-sdist:
    name: Test sdist on ${{ matrix.os }} / Python ${{ matrix.python-version }}
    needs: build-sdist
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-13, macos-14]
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    env:
      TOXENV: py${{ matrix.python-version }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: built-packages
          path: dist/

      - name: Install from sdist
        run: |
          python -m pip install tox
          SDIST_FILE=$(ls dist/*.tar.gz | head -n 1)
          python -m pip install "$SDIST_FILE"
        shell: bash

      - name: Run tox
        run: tox

  test-alpine:
    name: Test on Alpine (musllinux) for wheels and sdist
    needs: build
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/musllinux_1_1_x86_64

    steps:
      - name: Install Alpine dependencies
        run: |
          apk add --no-cache python3 py3-pip py3-wheel py3-setuptools py3-tox

      - name: Download built packages
        uses: actions/download-artifact@v4
        with:
          name: built-packages
          path: /work

      - name: Test wheel installation with tox
        run: |
          pip install /work/*.whl
          pip install tox
          tox

      - name: Clean wheel install and test sdist
        run: |
          pip uninstall -y your-package-name || true
          pip install /work/*.tar.gz
          tox

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test-wheels, test-sdist, test-alpine]

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: built-packages
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.8.8
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
